setwd("~/datasciencecoursera/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(mtrx) {
x <<- mtrx
cachematrix <<- NULL
}
get <- function() x
setmatrix <- function(pmatrix) cachematrix <<- pmatrix
getmatrix <- function() cachematrix
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
makeCacheMatrix <- matrix(1:4,2)
matrx <- matrix(1:4,2)
solve(matrx)
matrx
makeCacheMatrix <- function(x = matrix(1:4,2))
r <- 10
c <- 10
source(cachematrix.R)
mtx <- makeCacheMatrix(matrix(rnorm((r*c),mean=30,sd=15),nrow=r,ncol=c))
mtx
mtx <- makeCacheMatrix(matrix(1:4,2))
mtx
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a <- makeCacheMatrix(matrix(1:4,2))
class(a)
## Put comments here that give an overall description of what your
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
cachematrix <- NULL
set <- function(mtrx) {
x <<- mtrx
cachematrix <<- NULL
}
get <- function() {
x
}
setmatrix <- function(pmatrix) {
cachematrix <<- pmatrix
}
getmatrix <- function() {
cachematrix
}
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
> a <- makeCacheMatrix(matrix(1:4,2))
a <- makeCacheMatrix(matrix(1:4,2))
class(a)
a$get()
a$getmatrix()
a$set(matrix(5:8,2))
a$get
a$get()
## This function creates a special matrix object that can catch its inverse
makeCacheMatrix <- function(x = matrix()) {
cachematrix <- NULL
set <- function(mtrx) {
x <<- mtrx
cachematrix <<- NULL
}
get <- function() {
x
}
setmatrix <- function(pmatrix) {
cachematrix <<- pmatrix
}
getmatrix <- function() {
cachematrix> a <- makeCacheMatrix(matrix(1:4,2))
}
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
}
## This function creates a special matrix object that can catch its inverse
makeCacheMatrix <- function(x = matrix()) {
cachematrix <- NULL
set <- function(mtrx) {
x <<- mtrx
cachematrix <<- NULL
}
get <- function() {
x
}
setmatrix <- function(pmatrix) {
cachematrix <<- pmatrix
}
getmatrix <- function() {
cachematrix> a <- makeCacheMatrix(matrix(1:4,2))
}
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cachesolve(a)
cacheSolve(a)
a$getInverse()
a$getmatrix()
## This function creates a special matrix object that can catch its inverse
makeCacheMatrix <- function(x = matrix()) {
cachematrix <- NULL
set <- function(mtrx) {
x <<- mtrx
cachematrix <<- NULL
}
get <- function() {
x
}
setmatrix <- function(pmatrix) {
cachematrix <<- pmatrix
}
getmatrix <- function() {
cachematrix> a <- makeCacheMatrix(matrix(1:4,2))
}
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
## This function creates a special matrix object that can catch its inverse
makeCacheMatrix <- function(x = matrix()) {
cachematrix <- NULL
set <- function(mtrx) {
x <<- mtrx
cachematrix <<- NULL
}
get <- function() {
x
}
setmatrix <- function(pmatrix) {
cachematrix <<- pmatrix
}
getmatrix <- function() {
cachematrix> a <- makeCacheMatrix(matrix(1:4,2))
}
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
cacheSolve(a)
cacheSolve(a)
a$getmatrix()
b = a$getmatrix()
a$get() %*% b  #matrix
